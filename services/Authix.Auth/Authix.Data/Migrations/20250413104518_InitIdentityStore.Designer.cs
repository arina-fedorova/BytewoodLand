// <auto-generated />
using System;
using Authix.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Authix.Data.Migrations
{
    [DbContext(typeof(AuthixDbContext))]
    [Migration("20250413104518_InitIdentityStore")]
    partial class InitIdentityStore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("Authix.Auth.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = "$2a$11$ExGpFhJw/s1CgK4gacTpseNRjoSz2kk7AAUtk81gcpD2a6PdTjU7i",
                            Role = "Guardian",
                            Username = "Nymera"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = "$2a$11$4aHzuE5Na7ixbqE3tkN5P.BPLxJ4BfqMrhQcc8nFd0ghCtWHzm8Gy",
                            Role = "Scout",
                            Username = "Erlic"
                        },
                        new
                        {
                            Id = 3,
                            PasswordHash = "$2a$11$7x.HnF0OIGKpgMmQlZfKaevxIGsGsE2kJcKNR2Ecbwd2M8oMxi5ca",
                            Role = "Scout",
                            Username = "Thorne"
                        });
                });

            modelBuilder.Entity("Authix.Data.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Authix.Data.Models.ServiceClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecretHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceClients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "unity.gateway",
                            Role = 0,
                            SecretHash = "$2a$11$B62AhPC1zqzSSShc2FJ1aeWq7TQduvGnVYzE7TSZprXtSRdKdrjxu"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = "authix.auth",
                            Role = 1,
                            SecretHash = "$2a$11$JJFubdaTzQhcdvLGbcKmcOEcDYAL1vuNSqJx3s7mVRrEZGgAvW.xm"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = "casha.cache",
                            Role = 2,
                            SecretHash = "$2a$11$S7tQKIf9kwzlt6tkvS5muOJNiBArMK7w6UjP1XHGeWcnViE7PTq0C"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = "owla.observer",
                            Role = 3,
                            SecretHash = "$2a$11$e7vAzOsLec/Hq49Flqln9O72OY0F91joxbk5Mpz0N8NDpL5FDdn8O"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = "tweetle.messenger",
                            Role = 4,
                            SecretHash = "$2a$11$UZsukL1UJcNHMzLwKjTGZ.7Un6TGndZJ7qMyOp3hU.6MbZk0Ql6rq"
                        },
                        new
                        {
                            Id = 6,
                            ClientId = "squee.scheduler",
                            Role = 5,
                            SecretHash = "$2a$11$1ZRc7LKbS3l84GE/S9OVnOfuh1Hlb4HbImzhG2TwDnFrzn95X6MTi"
                        });
                });

            modelBuilder.Entity("Authix.Data.Models.RefreshToken", b =>
                {
                    b.HasOne("Authix.Auth.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Authix.Auth.Models.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
